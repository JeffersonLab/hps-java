package org.hps.record.evio;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;

import org.freehep.record.loop.AbstractLoopListener;
import org.freehep.record.loop.LoopEvent;
import org.freehep.record.loop.LoopListener;
import org.freehep.record.loop.RecordEvent;
import org.freehep.record.loop.RecordListener;
import org.jlab.coda.jevio.EvioEvent;

/**
 * Loop adapter for creating a list of metadata from processed EVIO files.
 * 
 * @author Jeremy McCormick, SLAC
 */
// TODO: delete me
public class EvioFileMetadataAdapter extends AbstractLoopListener implements RecordListener, LoopListener {
    
    /**
     * Initialize the logger.
     */
    private static final Logger LOGGER = Logger.getLogger(EvioFileMetadataAdapter.class.getPackage().getName());
    
    /**
     * The EVIO file currently being processed.
     */
    File currentEvioFile = null;
        
    /**
     * The list of metadata created by the job.
     */
    List<EvioFileMetadata> metadataList = new ArrayList<EvioFileMetadata>();
    
    /**
     * The processor that creates the metadata for each file.
     */
    EvioFileMetadataProcessor metadataProcessor = null;
    
    /**
     * Perform single record processing of EVIO events.
     * 
     * @param recordEvent the record event with the EVIO event
     */
    @Override
    public void recordSupplied(RecordEvent recordEvent) {
        EvioEvent evioEvent = (EvioEvent) recordEvent.getRecord();
        if (evioEvent == null) {
            throw new RuntimeException("Record has wrong type.");
        }        
        EvioFileSource evioSource = (EvioFileSource) recordEvent.getSource().getRecordSource();
        if (evioSource == null) {
            throw new RuntimeException("Wrong record source type.");
        }
        
        // First time setup.
        if (currentEvioFile == null) {
            currentEvioFile = evioSource.getCurrentFile();
            LOGGER.info("got first file " + currentEvioFile.getPath());
            metadataProcessor = new EvioFileMetadataProcessor(currentEvioFile);
        }
        
        // Start of new file.
        if (evioSource.getCurrentFile() != currentEvioFile) {            
            LOGGER.info("putting metadata for " + currentEvioFile.getPath() + " into output");
            EvioFileMetadata metadata = this.metadataProcessor.createEvioFileMetadata();
            metadataList.add(metadata);
            
            LOGGER.info("starting metadata for new file " + evioSource.getCurrentFile().getPath());
            currentEvioFile = evioSource.getCurrentFile();
            metadataProcessor = new EvioFileMetadataProcessor(currentEvioFile);
        }
        
        // Process an EVIO event.
        metadataProcessor.process(evioEvent);
    }
              
    /**
     * End of job hook.
     * 
     * @param event the loop event (contents ignored)
     */
    public void finish(final LoopEvent event) {
        LOGGER.info("finish");
        metadataList.add(metadataProcessor.createEvioFileMetadata());        
        LOGGER.info("created " + metadataList.size() + " metadata objects in job");
    }
    
    /**
     * Get the list of metadata generated by the job.
     * 
     * @return the list of metadata generated by the job
     */
    public List<EvioFileMetadata> getEvioFileMetadata() {
        return this.metadataList;
    }

}
